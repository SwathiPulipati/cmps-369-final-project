extends layout.pug 

block content   
    h1.mt-4.mb-3 Edit Contact
    #create
        form(action='/'+id+'/edit', method='post', novalidate, :class = "[show_valid ? 'was-validated':'needs-validation']")
            .row
                .col-.col-xl-6
                    fieldset.border.px-4.pb-4
                        legend.float-none.w-auto.px-2 Basic Info 
                        .form-floating.my-1
                            input(type='text', name = 'title', v-model.trim = 'c.title', required, placeholder = 'ex').form-control
                            label(for='title').form-label Title:  
                        .form-floating.my-1
                            input(type='text', name = 'first_name', v-model.trim = 'c.first_name', required, placeholder = 'ex').form-control
                            label(for='first_name').form-label First Name:    
                        .form-floating.my-1
                            input(type='text', name = 'last_name', v-model.trim = 'c.last_name', required, placeholder = 'ex').form-control
                            label(for='last_name').form-label Last Name:             
                .col-.col-xl-6    
                    fieldset.border.px-4.pb-4
                        legend.float-none.w-auto.px-2 Contact Methods 
                        .form-floating.my-1
                            input(type='text', name = 'phone', v-model.trim = 'c.phone', required, placeholder = 'ex').form-control
                            label(for='phone').form-label Phone:               
                        .form-floating.my-1
                            input(type='text', name = 'email', v-model.trim = 'c.email', required, placeholder = 'ex').form-control
                            label(for='email').form-label Email:   
                        .form-floating.my-1
                            input(type='text', name = 'address', v-model.trim = 'c.address', required, placeholder = 'ex').form-control
                            label(for='address').form-label Address: 
                        .alert.alert-danger.mt-2(v-if = "invalid_address") 
                            span This address could not be found. Try reformatting this address or try a different address.                  
            
            .row
                .col-12
                    fieldset.border.px-4.pb-4 
                        legend.float-none.w-auto.px-2 Contact Preferences 
                        section
                            input(name='contact_by_phone', type='checkbox', v-model = 'c.contact_by_phone').form-check-input
                            label(for="contact_by_phone").form-check-label.mx-2 Phone
                        section
                            input(name='contact_by_email', type='checkbox', v-model = 'c.contact_by_email').form-check-input
                            label(for="contact_by_email").form-check-label.mx-2 Email
                        section
                            input(name='contact_by_mail', type='checkbox', v-model = 'c.contact_by_mail').form-check-input
                            label(for="contact_by_mail").form-check-label.mx-2 Mail

            .d-flex.justify-content-end
                button(type = "button", @click = 'checkValid()').btn.btn-success.my-4 Save 
                a(href='/' +id).btn.btn-secondary.mx-2.align-self-center Cancel   
        //- p {{title}} {{first_name}} {{last_name}} {{phone}} {{email}} {{address}} {{contact_by_email}} {{contact_by_phone}} {{contact_by_mail}}         

    script. 
        Vue.createApp({
            data: function() {
                return {
                    show_valid: false,
                    invalid_address: false,
                    c: {}
                }
            },
            mounted: function() {
                this.init();
            },
            methods: {
                async init(){
                    const response = await axios.put('/#{id}')
                    this.c = response.data.c;
                    this.c.contact_by_phone = this.c.contact_by_phone  == 1 ? true : false
                    this.c.contact_by_email = this.c.contact_by_email  == 1 ? true : false
                    this.c.contact_by_mail = this.c.contact_by_mail  == 1 ? true : false
                },
                async checkValid(){
                    if(this.c.title === '' || this.c.first_name === '' || this.c.last_name === '' || this.c.phone === '' || this.c.email === '' || this.c.address === ''){
                        this.show_valid = true;
                    }
                    else{
                        const response = await axios.put('/#{id}/edit', {address : this.c.address});
                        if(response.data.result){
                            this.show_valid = true;
                            this.invalid_address = true;
                        }
                        else{
                            this.c.address = response.data.address;
                            this.c.latitude = response.data.latitude;
                            this.c.longitude = response.data.longitude;
                            this.invalid_address = false;
                            const done = await axios.post('/#{id}/edit', {c: this.c})
                            window.location.href = "/#{id}"
                        }
                    }
                }
            }
        }).mount('#create')