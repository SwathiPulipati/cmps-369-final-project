extends layout.pug 

block content   
    h1.mt-4.mb-3 Create Contact
    #create
        form(action='/create', method='post', novalidate, :class = "[show_valid ? 'was-validated':'needs-validation']", ref='form')
            .row
                .col-.col-xl-6
                    fieldset.border.px-4.pb-4
                        legend.float-none.w-auto.px-2 Basic Info 
                        .form-floating.my-1
                            select.form-select(v-model='title')
                                option(value='') 
                                option(value='Mr.') Mr.
                                option(value='Mrs.') Mrs. 
                                option(value='Ms.') Ms.
                                option(value='Mx.') Mx.
                                option(value='Dr.') Dr.                            
                            label(for='title').form-label Title:  
                        .form-floating.my-1
                            input(type='text', name = 'first_name', v-model.trim = 'first_name', required, placeholder = 'ex').form-control
                            label(for='first_name').form-label First Name:    
                        .form-floating.my-1
                            input(type='text', name = 'last_name', v-model.trim = 'last_name', required, placeholder = 'ex').form-control
                            label(for='last_name').form-label Last Name:             
                .col-.col-xl-6    
                    fieldset.border.px-4.pb-4
                        legend.float-none.w-auto.px-2 Contact Methods 
                        .form-floating.my-1
                            input(type='tel', name = 'phone', v-model.trim = 'phone', required, placeholder = 'ex', pattern="[0-9]{3}-[0-9]{3}-[0-9]{4}").form-control
                            label(for='phone').form-label Phone &lpar;xxx-xxx-xxxx&rpar;:               
                        .form-floating.my-1
                            input(type='email', name = 'email', v-model.trim = 'email', required, placeholder = 'ex').form-control
                            label(for='email').form-label Email:   
                        .form-floating.my-1
                            input(type='text', name = 'address', v-model.trim = 'address', required, placeholder = 'ex').form-control
                            label(for='address').form-label Address: 
                        .alert.alert-danger.mt-2(v-if = "invalid_address") 
                            span This address could not be found. Try reformatting this address or try a different address.                  
            
            .row
                .col-12
                    fieldset.border.px-4.pb-4 
                        legend.float-none.w-auto.px-2 Contact Preferences 
                        section
                            input(name='contact_by_phone', type='checkbox', v-model = 'contact_by_phone').form-check-input
                            label(for="contact_by_phone").form-check-label.mx-2 Phone
                        section
                            input(name='contact_by_email', type='checkbox', v-model = 'contact_by_email').form-check-input
                            label(for="contact_by_email").form-check-label.mx-2 Email
                        section
                            input(name='contact_by_mail', type='checkbox', v-model = 'contact_by_mail').form-check-input
                            label(for="contact_by_mail").form-check-label.mx-2 Mail

            .d-flex.justify-content-end
                button(type = "button", @click = 'checkValid()').btn.btn-primary.my-4 Add 
                a(href='/').btn.btn-secondary.mx-2.align-self-center Cancel   

    script. 
        Vue.createApp({
            data: function() {
                return {
                    show_valid: false,
                    invalid_address: false,
                    title: '',
                    first_name: '',
                    last_name: '',
                    phone: '',
                    email: '',
                    address: '',
                    contact_by_email: false,
                    contact_by_phone: false,
                    contact_by_mail: false
                }
            },
            methods: {
                async checkValid(){
                    if(this.$refs.form.checkValidity() === false){
                        this.show_valid = true;
                    }
                    else{
                        const response = await axios.post('/geolocate', {address : this.address});
                        if(response.data.result){
                            this.show_valid = true;
                            this.invalid_address = true;
                        }
                        else{
                            const done = await axios.post('/create', {
                                title: this.title,
                                first_name: this.first_name,
                                last_name: this.last_name,
                                phone: this.phone,
                                email: this.email,
                                address: response.data.address,
                                contact_by_email: this.contact_by_email,
                                contact_by_phone: this.contact_by_phone,
                                contact_by_mail: this.contact_by_mail,
                                latitude: response.data.latitude,
                                longitude: response.data.longitude
                            })
                            window.location.href = "/"

                        }
                    }
                }
            }
        }).mount('#create')